module test;

    reg [31:0] a = 0;
    reg [31:0] b = 0;
    wire [31:0] res;
    reg [3:0] op = 4'b0000; 
    wire zero; 
    wire o_carry;
    wire overflow;

    //add_32 test_add (.a(a), .b(b), .i_carry(i_carry), .o_sum(sum), .o_carry(o_carry), .overflow(overflow));
    alu_32 alu(.a(a), .b(b), .op(op), .carryout(o_carry), .overflow(overflow), .zero(zero), .result(res));
    initial
    begin
        $monitor(a, b, res, op, o_carry, overflow, zero);
        #100
        mux_1to32(1'b1, 0, 32'h7ffffff1, a);
        mux_1to32(1'b1, 0, 1312342, b);
        mux_1to32(1'b1, 0, 4'b000, op);

        #100
        mux_1to32(1'b1, 0, 1334212, a);
        mux_1to32(1'b1, 0, 32'h80000011, b);
        mux_1to32(1'b1, 0, 4'b0001, op);

        #100
        mux_1to32(1'b1, 0, 121233, a);
        mux_1to32(1'b1, 0, 4, b);
        mux_1to32(1'b1, 0, 4'b0010, op);

	#100
        mux_1to32(1'b1, 0, 1241233, a);
        mux_1to32(1'b1, 0, 541122, b);
        mux_1to32(1'b1, 0, 4'b0011, op);

	#100
        mux_1to32(1'b1, 0, 12124213, a);
        mux_1to32(1'b1, 0, 54112122, b);
        mux_1to32(1'b1, 0, 4'b0100, op);

	#100
        mux_1to32(1'b1, 0, 12141223, a);
        mux_1to32(1'b1, 0, 5, b);
        mux_1to32(1'b1, 0, 4'b0101, op);

	#100
        assign a = 12143223;
	assign b = 3;
	assign op = 4'b0110;

	#100
        assign a = 1224123;
	assign b = 5424232;
	assign op = 4'b0111;

	#100
        assign a = 12143123;
	assign b = 5;
	assign op = 4'b1000;

    end
  

endmodule